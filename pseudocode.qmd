---
title: "Pseudocode: Craps Simulation"
editor: visual
markdown: 
    wrap: sentence
---

# Instructor Comments

I have scaffolded this set of instructions very carefully.

Please proceed sequentially through this document, and do not move onto the next step until you have completed the present step.

My goal in this class is to teach you how to solve hard problems by breaking them down. This assignment is the culmination of that process, where you demonstrate that you have the tools to solve these hard problems.

You WILL get confused and miss steps if you do not follow the instructions sequentially.

# Understanding the game flow

ChatGPT provides the following pseudocode for playing a game of craps. You can see the full script [here](deps/ChatGPT%20Pseudocode.html) (it goes a bit beyond pseudocode).

Note that this pseudocode seems to be relatively Pythonic. You will have the opportunity to write (somewhat different) pseudocode later, but for now, work with this pseudocode to develop an understanding of the game.

```         
function playCraps():
    while true:
        // Roll the dice
        roll = rollDice()

        // Check the outcome of the roll
        if isComeOutRoll(roll):
            handleComeOutRoll(roll)
        else:
            handlePointRoll(roll)

        // Display current status and ask if the player wants to continue
        displayCurrentStatus()
        if not playAgain():
            break

function rollDice():
    die1 = random(1, 6)
    die2 = random(1, 6)
    total = die1 + die2
    return total

function isComeOutRoll(roll):
    return roll in [2, 3, 7, 11, 12]

function handleComeOutRoll(roll):
    if roll in [7, 11]:
        playerWins()
    elif roll in [2, 3, 12]:
        playerLoses()
    else:
        point = roll
        displayPointMessage(point)
        handlePointRoll(point)

function handlePointRoll(point):
    while true:
        roll = rollDice()

        if roll == point:
            playerWins()
            break
        elif roll == 7:
            playerLoses()
            break

function playerWins():
    displayWinMessage()

function playerLoses():
    displayLoseMessage()

function displayPointMessage(point):
    // Display the point for the current round

function displayWinMessage():
    // Display a message indicating the player has won

function displayLoseMessage():
    // Display a message indicating the player has lost

function displayCurrentStatus():
    // Display the current status of the game

function playAgain():
    // Ask the player if they want to play again
    // Return True if the player wants to play again, False otherwise
```

## Flowchart {#sec-flowchart}

Create a flowchart illustrating how the game unfolds, using the function names provided in the ChatGPT code. Include this as a PNG file in the repository and link to it here.

![**Flowchart illustrating the game play process for craps**](./craps_flowchart.png)

## Single game data structure {#sec-single-game-data}

It's one thing to write a set of instructions/pseudocode for how to *play* a game, but it's a separate task to figure out how to **computationally simulate** the game. For instance, in a simulation you often need to keep track of each move, and then compute summary statistics about the game to use when compiling simulation data.

Draw/sketch a tabular data structure that can store the results as you progress through a single game of craps. Keep track of how many times you've rolled the dice. What additional columns do you need? Hint: Each roll of the 2 dice should be a row.

|             |       |       |       |               |       |                      |             |             |
|--------|--------|--------|--------|--------|--------|--------|--------|--------|
| Roll Number | Die 1 | Die 2 | Total | Roll Type     | Point | Outcome              | Game Status | Play Again? |
| 1           | 5     | 2     | 7     | Come-Out Roll | N/A   | Win                  | End         | Yes         |
| 2           | 3     | 2     | 5     | Come-Out Roll | 5     | Point Set            | Continue    |             |
| 3           | 3     | 1     | 4     | Point Roll    | 5     | Rolling to hit point | Continue    |             |
| 4           | 2     | 3     | 5     | Point Roll    | 5     | Win                  | End         | No          |

## Summary data structure {#sec-game-summary-data}

Draw/sketch a summary tabular data structure to store summary information from a single game of craps.\
Hint: Each game of craps should yield a single row in your table.

|         |             |          |        |             |
|---------|-------------|----------|--------|-------------|
| Game ID | Total Rolls | Outcome  | Points | Play Again? |
| 1       | 1           | You Lose | N/A    | Yes         |
| 2       | 5           | You Lose | 4      | Yes         |
| 3       | 13          | You Win  | 6      | Yes         |
| 4       | 1           | You Win  | N/A    | No          |

# Simulating a game of craps {#sec-simulation-pseudocode}

In this part of the assignment, you'll spend the time figuring out how to implement craps as a computational simulation by adapting the ChatGPT pseudocode. Your code structure will be different from ChatGPT's structure because you are going to generate data to estimate various conditional probabilities.

**Requirement 1:**\
You must have a function to simulate a single craps game, `simulate_craps_game`, which returns a data frame with at least the following columns:

-   `id` (# times the dice has been rolled)
-   `roll` (the total roll of the dice)
-   `outcome` (win, loss, or continue)

You may have additional columns if you want.

**Requirement 2:**\
You must include a summary function named `summarize_craps_game` that takes the data frame returned by `simulate_craps_game` and generates a single row with the following columns:

-   `n_rolls`, the number of times the dice were rolled in the game,
-   `outcome`, whether the game was won or lost
-   `point`, the total of the dice on the first roll, if the game continued past the first roll, and NA otherwise.

**Requirement 3:**\
You must include a function to run your simulation, `run_craps_simulation(N)` that takes a single integer argument `N` which determines the number of games which will be played.

Think carefully about how you want to structure your code - do you want to return the full results for each game and then summarize, or do you want to summarize before you return the full results?

## Planning Helper Functions {#sec-helper}

Consider helper functions you will need to write to implement the game of craps. For each function, define the input, output, and provide a comment to explain what the function will do.

Here is pseudocode for a function that simulates the roll of the dice in craps to demonstrate the required format.

```         
roll_dice <- function() {
  # Input: None
  # Output: an integer from 2:12
  # Description: Generate 2 random integers from 1 to 6 and sum them
}
```


```         
is_come_out_roll <- function(roll) {
  # Input: An integer representing the sum of the dice on the come-out roll
  # Output: A logical value of whether the roll is a come-out roll or not 
  # Description: Determine if the roll is a come out roll
}
```

```         
handle_come_out_roll <- function(roll) {
  # Input: An integer representing the sum of the dice on the come-out roll
  # Output: A list containing the outcome ("win", "lose", "continue") and point 
  # Description: Determine the outcome or point from the come-out roll
}
```

```         
point_roll <- function(point) {
  # Input: The point value from the come-out roll
  # Output: A list containing the outcome ("win", "lose") and the number of rolls 
  # Description: Simulating rolling the dice until either the point or 7 is rolled
}
```

Put each function in a separate code block.

## Planning Main Functions {#sec-main-function-diagram}

Update your flowchart from @sec-flowchart to match the requirements of this section. Your flowchart should have separate blocks for each function. Which helper function(s) will be called inside each required function?

No change made to flowchart!

## Simulating a full game {#sec-game-pseudocode}

Fill in the pseudocode below to specify how you would return the single game data structure you created in @sec-single-game-data above. Remember to fill in the input parameter inside the function definition as well as the comment.

```         
simulate_craps_game <- function() {
  # Input: None
  # Output: A dataframe with the followinng columns:game id, roll, outcome
  # Description: Simulates a single game of craps and records each roll outcome
}
```

## Summarizing a game {#sec-game-summary-pseudocode}

Add a function that summarizes a game of craps (e.g. go from the data structure in @sec-single-game-data to the data structure in @sec-game-summary-data).

```         
summarize_craps_game <- function(game_data) {
  # Input: A dataframe returned from simulate_craps_game
  # Output: A single row data frame with columns n_rolls, outcome and point
  # Description: Summarizes the game of craps
}
```

## Simulating many games {#sec-game-simulation-pseudocode}

```         
run_craps_simulation <- function(N) {
  # Input: an integer N which determines the number of games to simulate
  # Output: A list containing all games and their summaries
  # Description: Simulate N games and craps and summarizes each game
}
```






